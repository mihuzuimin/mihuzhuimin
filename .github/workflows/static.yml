# 名称：部署静态内容到 GitHub Pages
name: Deploy static content to GitHub Pages

# 触发条件
on:
  # 1. 当推送到 main 分支时触发
  push:
    branches:
      - main

  # 2. 允许手动触发工作流（从 GitHub Actions 页面）
  workflow_dispatch:

# 设置权限
permissions:
  contents: read # 读取仓库内容
  pages: write    # 写入 GitHub Pages 权限
  id-token: write # 允许使用 OIDC 令牌（如果需要）

# 并发控制
concurrency:
  group: "pages" # 同一时间只允许一个名为 "pages" 的组运行
  cancel-in-progress: false # 不取消正在进行的部署

# 定义作业
jobs:
  # 部署作业
  deploy:
    # 使用 GitHub Pages 环境
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 获取部署后的页面 URL

    # 在最新的 Ubuntu 虚拟机上运行
    runs-on: ubuntu-latest

    # 步骤定义
    steps:
      # 步骤 1：检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 如果您的网站在子目录中，例如 /docs，可以在这里指定
          # path: docs

      # 步骤 2：设置 Pages 环境
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 步骤 3：上传 Pages 工件
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 上传整个仓库内容
          path: .

      # 步骤 4：部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 可选步骤：通知（示例：发送到 Slack）
      - name: Notify Deployment
        if: success() # 仅在部署成功时运行
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,actor,eventName,workflow,job,url
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
